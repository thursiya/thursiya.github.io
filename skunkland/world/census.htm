<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Census of Skunkland</title>
		<link rel="stylesheet" href="../data/mc.css">
		<link rel="icon" href="../images/pickaxe.png" type="image/x-icon">
		<script src="../data/time.js"></script>
	</head>
	<body>
		<main>
			<div style="text-align: center"><img src="../images/bookandquill.png"></div>
			<div class="content round shadow">
				<div class="contentheader round">Taking the Census</div>
				<p>
					In the world of Skunkland, the Chief Information Officer of the Department of Information in the Republic of Gavel orders a global census from 
					the Department of Information's World Records Office every 100 years. This is the census data that is published in books in game. In the real 
					world, the census is updated on a regular basis as additions are made to the settlements of Skunkland, based on the calculations 
					<a href="calculations.htm">posted here</a>.
				</p>
				<br>

				<div class="contentheader round">Current Census</div>
				<table border=1>
					<thead>
						<tr>
							<th class="sortable" onclick="list(1)" title="Click to sort alphabetically by nation and population/settlement name">Nation</th>
							<th class="sortable" onclick="list(2)" title="Click to sort alphabetically/reverse by settlement name">Settlements</th>
							<th class="sortable" onclick="list(3)" title="Click to sort by population from greatest/least">Population</th>
							<th class="sortable" onclick="list(4)" title="Click to sort by most recent/oldest census date">Date of most<br>Recent Census</th>
						</tr>
					</thead>
					<tbody id="censustabledata"></tbody>
				</table>
				<br>
				
				<p>
					As of the most recent political map, the Kingdom of Aiur, Miasma of Boatmurdered, and Independent State of Sedona have no inhabited settlements. 
					All other settlements have no population base (e.g. player-built housing, designated work sites).
				</p>
			</div>
		</main>
		<script>
			const city = [];
			loadDoc("../data/census.txt", buildCityArray);
			
			function loadDoc(url, cFunction) {
				const xhttp = new XMLHttpRequest();
				xhttp.onload = function() {cFunction(this);}
				xhttp.open("GET", url);
				xhttp.send();
			}

			function buildCityArray(xhr) {
				const citydata = xhr.response.split('\n').filter(v => v).map(v => v.replace(/\s*,\s*/g, ',').trim().split(','));
				console.log(citydata);
				city.push(...citydata);
				//const city = buildArray(cities);
				list();
			}

			function list(id = 1) {
				let out = "";
				// add or remove class="toggled" (toggled list)
				// num.toLocaleString('en', {useGrouping:true}) // convert ####### to #,###,###
				for (let i of city) {
					out += `<tr>`;
					//if (sorttype != 1 || newnat[i] != 0) {
					//	out += `<td rowspan=${sorttype == 1 ? newnat[i] : 1}>${arr[i][1] != "<i>Skunkland</i>" ? ('<a href="' + arr[i][1] + '.php">' + arr[i][1] + '</a>') : arr[i][1])}</td>`;
					//}
					out += `<td><a href="${i[1]}">${i[1]}</a></td>`;
					out += `<td>${i[0]}</td><td>${pp(i[2], i[3], i[4], i[5])}</td><td>${syear(~~i[6], i[7], i[8])}</td></tr>`;
				}
				console.log(out);
				//document.getElementById("censustabledata").innerHTML = out;
			}

			// Eliminate this function
			function buildArray(arr) {
				for(let i = 0; i < arr.length; i++) {
					// Remove spaces before and after commas and leading or ending spaces
					arr[i] = arr[i].replace(/\s*,\s*/g, ',');
					arr[i] = arr[i].trim();
					arr[i] = arr[i].split(',');
					// Convert 4 pop values into 1 string (with commas) and one numerical population value
					var thispop = pp(+arr[i][2], +arr[i][3], +arr[i][4], +arr[i][5]);
					var popstring = thispop.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");	// convert ####### to #,###,###)
					arr[i].splice(2,4,popstring);
					arr[i].splice(3,0,thispop);
					// Convert 3 date numbers to a date value
					census = new Date(Number(arr[i][4]),Number(arr[i][5])-1,Number(arr[i][6]));
					arr[i].splice(4,3,census);
				}
				return arr;
			}

			// Probably need to move this function to its own .js file (needed by world files?)
			function pp(jobs, beds, tourbeds, bonus) {
				//if (typeof jobs == 'string') {
				//	for(var i = 0; i < city.length; i++) {
				//		if (city[i].indexOf(jobs) > -1) return (document.write(city[i][2]));
				//	}
				//	document.write("Uninhabited");
				//} else { 
					var homes = beds * 2;
					var tourists = tourbeds / 2;
					var maxpop = (homes + jobs) / 2;
					var p = Math.ceil((maxpop * bonus + tourists) * 10) * 100;
					return p;
				//}
			}

			/*
			function list(id) {
				let out = "";
				let arr = [];
				switch (sorttype) {
					default:
						sorttype = 1;
					case 1:
						Current == 1 ? (arr = npsort, Current = 0) : (arr = ncsort, Current = 1);
						break;
					case 2:
						Current == 2 ? (arr = crev, Current = 0) : (arr = csort, Current = 2);
						break;
					case 3:
						Current == 3 ? (arr = prev, Current = 0) : (arr = psort, Current = 3);
						break;
					case 4:
						Current == 4 ? (arr = drev, Current = 0) : (arr = dsort, Current = 4);
						break;
				}
				for (var i = 0; i < arr.length; i++) {
					out += `<tr>`;
					if (sorttype != 1 || newnat[i] != 0) {
						out += `<td rowspan=${sorttype == 1 ? newnat[i] : 1}>${arr[i][1] != "<i>Skunkland</i>" ? ('<a href="' + arr[i][1] + '.php">' + arr[i][1] + '</a>') : arr[i][1])}</td>`;
					}
					out += `<td>${arr[i][0]}</td><td>${arr[i][2]}</td><td>${syear(arr[i][4])}</td></tr>`;
				}
				document.getElementById("censustabledata").innerHTML = out;
			}
			*/


			
			var Current = 0;
			
			csort = city.slice(0);
			psort = city.slice(0);
			ncsort = city.slice(0);
			npsort = city.slice(0);
			dsort = city.slice(0);
		
	// Sort cities alphabetically		
	csort.sort();
	// Sort cities reverse-alphabetically
	crev = csort.slice(0);
	crev.reverse();
	// Sort cities by population (Greatest to least)
	psort.sort(function(a, b){return b[3] - a[3]});
	// Sort cities by population (Least to greatest)
	prev = psort.slice(0);
	prev.reverse();
	// Sort cities by nation then population (greatest to least)
	ncsort.sort(function(a, b){return a[1] == b[1] ? b[3] - a[3] : a[1] > b[1] ? 1 : -1});
	// Sort cities by nation then alphabetically
	npsort.sort(function(a, b){return (a[1] + a[0]) > (b[1] + b[0]) ? 1 : -1});
	// Creat array for rowspan nation view
	newnat = [];
	var last = 0;
	newnat[0] = 1;
	for (var i = 1; i < ncsort.length; i++) {
		newnat[i] = 0;
		ncsort[i-1][1] == ncsort[i][1] ? newnat[last] ++ : (last = i, newnat[i]++);
	}
	// Sort cities by most recent census date
	dsort.sort(function(a, b){return b[4] - a[4]});
	// Sort cities by oldest census date
	drev = dsort.slice(0);
	drev.reverse();
		
			//list();

			
		</script>
	</body>
</html>
